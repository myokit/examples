[[model]]
name: paci-2013-ventricular-vs
version: 20221031
mmt_authors: Michael Clerx
desc: """
    Myokit version of the 2013 hiPSC model by Paci et al., ventricular version
    [1].

    This implementation is based on a published CellML file [2]. At the time of
    retrieval, the initial value for CaSR in the CellML file had an erroneous
     minus (-) in front of it, which is corrected in this mmt file.

    Like the CellML implementation, this model uses volts and seconds.

    References:

    [1] Computational Models of Ventricular- and Atrial-Like Human Induced
        Pluripotent Stem Cell Derived Cardiomyocytes
        Michaelangelo Paci, Jari Hyttinen, Katriina Aalto-Setala, Stefano Severi
        Annals of Biomedical Engineering, Vol. 41, No. 11, November 2013
        http://dx.doi.org/10.1007/s10439-013-0833-3

    [2] https://models.cellml.org/w/sseveri/paci_hyttinen_aaltosetala_severi_2013

"""
# Initial values
membrane.V   = -7.43340057623840950e-2
ina.m        =  1.02953468725003994e-1
ina.h        =  7.86926637881461000e-1
ina.j        =  2.53943221774722006e-1
ical.d       =  8.96088425225181960e-5
ical.f1      =  9.70411811263976021e-1
ical.f2      =  9.99965815466749008e-1
ical.fCa     =  9.98925296531803952e-1
ikr.xr1      =  7.78547011240132009e-3
ikr.xr2      =  4.32162576531616993e-1
iks.xs       =  3.22944866983665979e-2
if.xf        =  1.00615100568753002e-1
ito.q        =  8.39295925773218987e-1
ito.r        =  5.73289893326379019e-3
irel.g       =  9.99999981028516949e-1
sodium.Nai   =  1.09248496211573993e1
calcium.Cai  =  1.80773974140477016e-5
calcium.CaSR =  2.73423475193100007e-1

[engine]
time = 0 [s]
    in [s]
    bind time
pace = 0
    bind pace

#
# Stimulus current
#
[stimulus]
i_stim = engine.pace * amplitude / cell.Cm
    in [A/F]
amplitude = -5.5e-10 [A]
    in [A]

#
# Membrane potential
#
[membrane]
dot(V) = -(i_ion + stimulus.i_stim)
    in [V]
    label membrane_potential
i_ion = (+ ik1.IK1 + ikr.IKr + iks.IKs + ito.Ito + if.If
         + ina.INa + ibna.IbNa
         + ical.ICaL + ipca.IpCa + ibca.IbCa
         + inak.INaK
         + inaca.INaCa
        )
    in [A/F]

#
# Cell size
#
[cell]
Cm = 9.87109e-11 [F]
    in [F]
V_SR = 583.73 [um^3]
    in [um^3]
Vc = 8800 [um^3]
    in [um^3]

#
# Physical constants
#
[phys]
R = 8.314472 [J/mol/K]
    in [J/mol/K]
T = 310 [K]
    in [K]
F = 96485.3415 [C/mol]
    in [C/mol]
RTF = R * T / F
    in [V]
FRT = F / R / T
    in [1/V]

#
# Reversal potentials
#
[rev]
use phys.RTF
ECa = 0.5 * RTF * log(extra.Cao / calcium.Cai)
    in [V]
EK = RTF * log(extra.Ko / potassium.Ki)
    in [V]
EKs = RTF * log((extra.Ko + PkNa * extra.Nao) / (potassium.Ki + PkNa * sodium.Nai))
    in [V]
ENa = RTF * log(extra.Nao / sodium.Nai)
    in [V]
PkNa = 0.03

#
# L-type calcium current
#
[ical]
use membrane.V
use phys.F, phys.FRT
use calcium.Cai, extra.Cao
mV = V * 1000 [mV/V]
    in [mV]
dot(d) = (inf - d) / tau
    inf = 1 / (1 + exp(-(mV + 9.1 [mV]) / 7 [mV]))
    a = 0.25 + 1.4 / (1 + exp((-mV - 35 [mV]) / 13 [mV]))
    b = 1.4 [ms] / (1 + exp((mV + 5 [mV]) / 5 [mV]))
        in [ms]
    c = 1 [ms] / (1 + exp((-mV + 50 [mV]) / 20 [mV]))
        in [ms]
    tau = (a * b + c) * 1e-3 [s/ms]
        in [s]
dot(f1) = (inf - f1) / tau
    inf = 1 / (1 + exp((mV + 26 [mV]) / 3 [mV]))
    tau = (20 [ms]
           + 1102.5 [ms] * exp(-((mV + 27 [mV])^2 / 15 [mV^2])^2)
           + 200 [ms] / (1 + exp((13 [mV] - mV) / 10 [mV]))
           + 180 [ms] / (1 + exp((30 [mV] + mV) / 10 [mV]))
          ) * c * 1e-3 [s/ms]
        in [s]
    c = if(f1 < inf, 1 + 1433 [1/mM] * (Cai - 50e-6 [mM]), 1)
dot(f2) = (inf - f2) / tau
    inf = 0.33 + 0.67 / (1 + exp((mV + 35 [mV]) / 4 [mV]))
    tau = (600 [ms] * exp(-(mV + 25 [mV])^2 / 170 [mV^2])
           + 31 [ms] / (1 + exp((25 [mV] - mV) / 10 [mV]))
           + 16 [ms] / (1 + exp((30 [mV] + mV) / 10 [mV]))
          ) * 1e-3 [s/ms]
        in [s]
dot(fCa) = e * (inf - fCa) / tau
    inf = (a + b + c) / 1.3156
    a = 1 / (1 + (Cai / 0.0006 [mM])^8)
    b = 0.1 / (1 + exp((Cai - 0.0009 [mM]) / 0.0001 [mM]))
    c = 0.3 / (1 + exp((Cai - 0.00075 [mM]) / 0.0008 [mM]))
    tau = 0.002 [s]
        in [s]
    e = if(V > -0.06 [V] and inf > fCa, 0, 1)
P_CaL = 8.635702e-5 [m^3/F/s]
    in [m^3/F/s]
ICaL = P_CaL * d * f1 * f2 * fCa * if(V != 0 [V], b, c)
    in [A/F]
    b = 4 * V * F * FRT * (Cai * exp(2 * V * FRT) - 0.341 * Cao) / (exp(2 * V * FRT) - 1)
        in [mM*C/mol]
    c = 2 * F * (Cai - 0.341 * Cao)
        in [mM*C/mol]

#
# IK1
#
[ik1]
use membrane.V
use rev.EK, extra.Ko
ve = (V - EK) * 1000 [mV/V]
    in [mV]
inf = alpha / (alpha + beta)
    alpha = 3.91 / (1 + exp(0.5942 [1/mV] * (ve - 200 [mV])))
    beta = (-1.509 * exp(0.0002 [1/mV] * (ve + 100 [mV])) + exp(0.5886 [1/mV] * (ve - 10 [mV]))) / (1 + exp(0.4547 [1/mV] * ve))
g = 28.1492 [S/F]
    in [S/F]
IK1 = g * inf * sqrt(Ko / 5.4 [mM]) * (V - EK)
    in [A/F]

#
# IKr
#
[ikr]
use extra.Cao, extra.Ko
use membrane.V
mV = V * 1000 [mV/V]
    in [mV]
dot(xr1) = (inf - xr1) / tau
    L0 = 0.025
    Q = 2.3
    V_half = 1000 [mV/V] * (-phys.RTF / Q * log((1 + Cao / 2.6 [mM])^4 / (L0 * (1 + Cao / 0.58 [mM])^4)) - 0.019 [V])
        in [mV]
    inf = 1 / (1 + exp((V_half - mV) / 4.9 [mV]))
    alpha = 450 / (1 + exp((-45 [mV] - mV) / 10 [mV]))
    beta = 6 / (1 + exp((30 [mV] + mV) / 11.5 [mV]))
    tau = alpha * beta * 1e-3 [s]
        in [s]
dot(xr2) = (inf - xr2) / tau
    inf = 1 / (1 + exp((mV + 88 [mV]) / 50 [mV]))
    alpha = 3 / (1 + exp((-60 [mV] - mV) / 20 [mV]))
    beta = 1.12 / (1 + exp((-60 [mV] + mV) / 20 [mV]))
    tau = alpha * beta * 1e-3 [s]
        in [s]
g = 29.8667 [S/F]
    in [S/F]
IKr = g * sqrt(Ko / 5.4 [mM]) * xr1 * xr2 * (V - rev.EK)
    in [A/F]

#
# IKs
#
[iks]
use membrane.V
mV = V * 1000 [mV/V]
    in [mV]
dot(xs) = (inf - xs) / tau
    inf = 1 / (1 + exp((-mV - 20 [mV]) / 16 [mV]))
    alpha = 1100 / sqrt(1 + exp((-10 [mV] - mV) / 6 [mV]))
    beta = 1 / (1 + exp((-60 [mV] + mV) / 20 [mV]))
    tau = alpha * beta * 1e-3 [s]
        in [s]
g = 2.041 [S/F]
    in [S/F]
k = 1 + 0.6 / (1 + (3.8e-5 [mM] / calcium.Cai)^1.4)
IKs = g * xs^2 * k * (V - rev.EKs)
    in [A/F]

#
# Funny current, haha!
#
[if]
use membrane.V
mV = V * 1000 [mV/V]
    in [mV]
dot(xf) = (inf - xf) / tau
    inf = 1 / (1 + exp((mV + 77.85 [mV]) / 5 [mV]))
    tau = 1900 [ms] / (1 + exp((mV + 15 [mV]) / 10 [mV])) * 1e-3 [s/ms]
        in [s]
E = -0.017 [V]
    in [V]
g = 30.10312 [S/F]
    in [S/F]
If = g * xf * (V - E)
    in [A/F]

#
# Ito
#
[ito]
use membrane.V
mV = V * 1000 [mV/V]
    in [mV]
dot(q) = (inf - q) / tau
    inf = 1 / (1 + exp((mV + 53 [mV]) / 13 [mV]))
    tau = (6.06 [ms] + 39.102 [ms] / (
            0.57 * exp(-0.08 [1/mV] * (mV + 44 [mV]))
            + 0.065 * exp(0.1 [1/mV] * (mV + 45.93 [mV]))
          )) * 1e-3 [s/ms]
        in [s]
dot(r) = (inf - r) / tau
    inf = 1 / (1 + exp(-(mV - 22.3 [mV]) / 18.75 [mV]))
    tau = (2.75352 [ms] + 14.40516 [ms] / (1.037 * exp(0.09 [1/mV] * (mV + 30.61 [mV])) + 0.369 * exp(-0.12 [1/mV] * (mV + 23.84 [mV])))) * 1e-3 [s/ms]
        in [s]
g = 29.9038 [S/F]
    in [S/F]
Ito = g * q * r * (V - rev.EK)
    in [A/F]

#
# INa
#
[ina]
use membrane.V
mV = V * 1000 [mV/V]
    in [mV]
dot(m) = (inf - m) / tau
    inf = 1 / (1 + exp((-mV - 34.1 [mV]) / 5.9 [mV]))^(1 / 3)
    alpha = 1 / (1 + exp((-mV - 60 [mV]) / 5 [mV]))
    beta = 0.1 / (1 + exp((mV + 35 [mV]) / 5 [mV])) + 0.1 / (1 + exp((mV - 50 [mV]) / 200 [mV]))
    tau = alpha * beta * 1e-3 [s]
        in [s]
dot(h) = (inf - h) / tau
    inf = 1 / sqrt(1 + exp((mV + 72.1 [mV]) / 5.7 [mV]))
    alpha = if(V < -0.04 [V], 0.057 [1/ms] * exp(-(mV + 80 [mV]) / 6.8 [mV]), 0 [1/ms])
        in [1/ms]
    beta = if(V < -0.04 [V],
              2.7 [1/ms] * exp(0.079 [1/mV] * mV) + 3.1 [1/ms] * 1e5 * exp(0.3485 [1/mV] * mV),
              0.77 [1/ms] / (0.13 * (1 + exp((mV + 10.66 [mV]) / -11.1 [mV])))
             )
        in [1/ms]
    tau = if(V < -0.04 [V], 1 / (alpha + beta), 1.6947 [ms]) * 1.5 * 1e-3 [s/ms]
        in [s]
dot(j) = (inf - j) / tau
    inf = 1 / sqrt(1 + exp((mV + 72.1 [mV]) / 5.7 [mV]))
    alpha = if(V < -0.04 [V],
               (-25428 [1/ms/mV] * exp(0.2444 [1/mV] * mV)
                -6.948 [1/ms/mV] * 1e-6 * exp(-0.04391 [1/mV] * mV)
               ) * (mV + 37.78 [mV]) / (1 + exp(0.311 [1/mV] * (mV + 79.23 [mV]))),
               0 [1/ms])
        in [1/ms]
    beta = if(V < -0.04 [V],
              0.02424 [1/ms] * exp(-0.01052 [1/mV] * mV) / (1 + exp(-0.1378 [1/mV] * (mV + 40.14 [mV]))),
              0.6 [1/ms] * exp(0.057 [1/mV] * mV) / (1 + exp(-0.1 [1/mV] * (mV + 32 [mV])))
             )
        in [1/ms]
    tau = 7 / (alpha + beta) * 1e-3 [s/ms]
        in [s]
g = 3671.2302 [S/F]
    in [S/F]
INa = g * m^3 * h * j * (V - rev.ENa)
    in [A/F]

#
# INaCa
#
[inaca]
use membrane.V
use phys.FRT
use sodium.Nai, extra.Nao
use calcium.Cai, extra.Cao
KmCa = 1.38 [mM]
    in [mM]
KmNai = 87.5 [mM]
    in [mM]
Ksat = 0.1
alpha = 2.8571432
gamma = 0.35
kNaCa = 4900 [A/F]
    in [A/F]
INaCa = kNaCa * numer / denom
    in [A/F]
    numer = exp(gamma * V * FRT) * Nai^3 * Cao - exp((gamma - 1) * V * FRT) * Nao^3 * Cai * alpha
        in [mM^4]
    denom = (KmNai^3 + Nao^3) * (KmCa + Cao) * (1 + Ksat * exp((gamma - 1) * V * FRT))
        in [mM^4]

#
# INaK
#
[inak]
use membrane.V
use extra.Ko, sodium.Nai
use phys.FRT
Km_K = 1 [mM]
    in [mM]
Km_Na = 40 [mM]
    in [mM]
PNaK = 1.841424 [A/F]
    in [A/F]
INaK = PNaK * Ko / (Ko + Km_K) * Nai / (Nai + Km_Na) / (1 + 0.1245 * exp(-0.1 * V * FRT) + 0.0353 * exp(-V * FRT))
    in [A/F]

#
# IpCa
#
[ipca]
KpCa = 0.0005 [mM]
    in [mM]
g = 0.4125 [A/F]
    in [A/F]
IpCa = g * calcium.Cai / (calcium.Cai + KpCa)
    in [A/F]

#
# Background calcium current
#
[ibca]
g = 0.69264 [S/F]
    in [S/F]
IbCa = g * (membrane.V - rev.ECa)
    in [A/F]

#
# Background sodium current
#
[ibna]
g = 0.9 [S/F]
    in [S/F]
IbNa = g * (membrane.V - rev.ENa)
    in [A/F]

#
# Internal potassium concentration
#
[potassium]
Ki = 150 [mM]
    in [mM]

#
# Internal sodium concentration
#
[sodium]
use cell.Cm, cell.Vc, phys.F
dot(Nai) = -(ina.INa + ibna.IbNa + 3 * inak.INaK + 3 * inaca.INaCa) * Cm / (F * Vc * 1e-18 [F/aF])
    in [mM]

#
# Ryanodine release receptors
#
[irel]
use calcium.Cai, calcium.CaSR
dot(g) = c * (inf - g) / tau
    inf = if(Cai <= 0.00035 [mM], 1 / (1 + (Cai / 0.00035 [mM])^6), 1 / (1 + (Cai / 0.00035 [mM])^16))
    tau = 0.002 [s]
        in [s]
    c = if(inf > g and membrane.V > -0.06 [V], 0, 1)
a_rel = 16.464 [mM/s]
    in [mM/s]
b_rel = 0.25 [mM]
    in [mM]
c_rel = 8.232 [mM/s]
    in [mM/s]
i_rel = (c_rel + a_rel * CaSR^2 / (b_rel^2 + CaSR^2)) * ical.d * g * 0.0411
    in [mM/s]

#
# Ca uptake into SR
#
[iup]
use calcium.Cai
Kup = 0.00025 [mM]
    in [mM]
VmaxUp = 0.56064 [mM/s]
    in [mM/s]
i_up = VmaxUp / (1 + Kup^2 / Cai^2)
    in [mM/s]

#
# Ca leak from SR
#
[ileak]
use calcium.Cai, calcium.CaSR
V_leak = 4.4444e-4 [1/s]
    in [1/s]
i_leak = (CaSR - Cai) * V_leak
    in [mM/s]

#
# Internal calcium concentrations
#
[calcium]
use membrane.V
use cell.Vc, cell.V_SR
use iup.i_up, irel.i_rel, ileak.i_leak
Buf_C = 0.25 [mM]
    in [mM]
Buf_SR = 10 [mM]
    in [mM]
Kbuf_C = 0.001 [mM]
    in [mM]
Kbuf_SR = 0.3 [mM]
    in [mM]
CaSR_bufSR = 1 / (1 + Buf_SR * Kbuf_SR / (CaSR + Kbuf_SR)^2)
Cai_bufc = 1 / (1 + Buf_C * Kbuf_C / (Cai + Kbuf_C)^2)
dot(CaSR) = CaSR_bufSR * (Vc / V_SR) * (i_up - i_rel - i_leak)
    in [mM]
dot(Cai) = Cai_bufc * (i_leak - i_up + i_rel - (ical.ICaL + ibca.IbCa + ipca.IpCa - 2 * inaca.INaCa) * cell.Cm / (2 * Vc * phys.F * 1e-18 [F/aF]))
    in [mM]

#
# Extracellular concentrations
#
[extra]
Cao = 1.8 [mM]
    in [mM]
Nao = 151 [mM]
    in [mM]
Ko = 5.4 [mM]
    in [mM]

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model, create simulation
m = get_model()
s = myokit.Simulation(m)

# Run simulation
d = s.run(3)

# Display the results
plt.figure()
plt.xlabel('Time (s)')
plt.ylabel('Membrane potential (V)')
plt.plot(d.time(), d['membrane.V'])
plt.show()

